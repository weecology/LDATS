% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TS_methods.R
\name{ldats_classic}
\alias{ldats_classic}
\alias{count_trips}
\alias{swap_chains}
\alias{ldats_classic_control}
\alias{prep_cpts}
\alias{update_cpts}
\alias{prep_temp_sequence}
\alias{prep_saves}
\alias{update_saves}
\alias{process_saves}
\alias{prep_ptMCMC_inputs}
\alias{prep_proposal_dist}
\alias{prep_ids}
\alias{update_ids}
\alias{propose_step}
\alias{eval_step}
\alias{take_step}
\alias{proposed_step_mods}
\title{Estimate changepoints using the LDATS classic ptMCMC method}
\usage{
ldats_classic(TS, control = list())

count_trips(ids)

swap_chains(chainsin, inputs, ids)

ldats_classic_control(ntemps = 6, penultimate_temp = 2^6,
  ultimate_temp = 1e+10, q = 0, nit = 10000, magnitude = 12,
  burnin = 0, thin_frac = 1, memoise = TRUE, quiet = FALSE)

prep_cpts(TS)

update_cpts(cpts, swaps)

prep_temp_sequence(TS)

prep_saves(TS)

update_saves(i, saves, steps, swaps)

process_saves(saves, TS)

prep_ptMCMC_inputs(TS)

prep_proposal_dist(TS)

prep_ids(TS)

update_ids(ids, swaps)

propose_step(TS, i, cpts, inputs)

eval_step(i, cpts, prop_step, inputs)

take_step(cpts, prop_step, accept_step)

proposed_step_mods(TS, prop_changepts, inputs)
}
\arguments{
\item{TS}{\code{list} time series model object.}

\item{control}{A \code{list} of parameters to control the fitting of the
time series model via the LDATS classic ptMCMC method. Values not input 
assume defaults set by \code{\link{ldats_classic_control}}.}

\item{ids}{\code{vector} (for \code{update_ids}, \code{swap_chains}) 
of the existing chain ids or \code{matrix} (rows: chains, 
columns: iterations; for \code{count_trips})
of identifiers of the particles in each chain for 
each iteration of the ptMCMC algorithm.}

\item{chainsin}{Chain configuration to be evaluated for swapping.}

\item{inputs}{\code{list} of static inputs for use within the ptMCMC 
algorithm.}

\item{ntemps}{\code{integer} number of temperatures (chains) to use in the 
ptMCMC algorithm.}

\item{penultimate_temp}{Penultimate temperature in the ptMCMC sequence.}

\item{ultimate_temp}{Ultimate temperature in the ptMCMC sequence.}

\item{q}{Exponent controlling the ptMCMC temperature sequence from the 
focal chain (reference with temperature = 1) to the penultimate chain. 0
(default) implies a geometric sequence. 1 implies squaring before 
exponentiating.}

\item{nit}{\code{integer} number of iterations (steps) used in the ptMCMC
algorithm.}

\item{magnitude}{Average magnitude (defining a geometric distribution)
for the proposed step size in the ptMCMC algorithm.}

\item{burnin}{\code{integer} number of iterations to remove from the 
beginning of the ptMCMC algorithm.}

\item{thin_frac}{Fraction of iterations to retain, must be \eqn{(0, 1]},
and the default value of 1 represents no thinning.}

\item{memoise}{\code{logical} indicator of whether the response 
function should be memoised (via \code{\link[memoise]{memoise}}).}

\item{quiet}{\code{logical} indicator of whether the model should run 
quietly (if \code{FALSE}, a progress bar and notifications are printed).}

\item{cpts}{\code{matrix} of change point locations across chains.}

\item{swaps}{Chain configuration after among-temperature swaps.}

\item{i}{\code{integer} iteration index.}

\item{saves}{The existing list of saved data objects.}

\item{steps}{Chain configuration after within-temperature steps.}

\item{prop_step}{Proposed step output from \code{propose_step}.}

\item{accept_step}{\code{logical} indicator of acceptance of each chain's
proposed step.}

\item{prop_changepts}{\code{matrix} of proposed change points across 
chains.}
}
\value{
\code{ldats_classic}: \code{list} of changepoint locations, log 
    likelihoods, and model diagnostics. \cr \cr
  \code{ldats_classic_control}: \code{list} of named control elements
    for use in \code{\link{ldats_classic}}. \cr \cr
  \code{prep_ptMCMC_inputs}: \code{list} containing the static 
    inputs for use within the ptMCMC algorithm for estimating change
    points.  \cr \cr
  \code{prep_temp_sequence}: \code{vector} of temperatures.
  \code{prep_proposal_dist}: \code{list} of two \code{matrix} elements: 
    [1] the size of the proposed step for each iteration of each chain and 
    [2] the identity of the change point location to be shifted by the 
    step for each iteration of each chain.
  \code{prep_ids},\code{update_ids}: \code{vector} of ids. \cr \cr
  \code{prep_cpts},\code{update_cpts}: \code{list} of [1] \code{matrix} 
    of change points (rows) for each temperature (columns) and [2] 
    \code{vector} of log-likelihood values for each of the chains. \cr \cr
  \code{prep_saves},\code{update_saves},\code{process_saves}: \code{list}
    of ptMCMC objects: change points (\code{$cpts}), 
    log-likelihoods (\code{$lls}), chain ids (\code{$ids}), 
    step acceptances (\code{$step_accepts}), and swap acceptances 
    (\code{$swap_accepts}). \cr \cr
  \code{step_chains}: \code{list} of change points, log-likelihoods, 
    and logical indicators of acceptance for each chain. \cr \cr
  \code{propose_step}: \code{list} of change points and 
    log-likelihood values for the proposal. \cr \cr
  \code{eval_step}: \code{logical} vector indicating if each 
    chain's proposal was accepted. \cr \cr
  \code{take_step}: \code{list} of change points, log-likelihoods, 
    and logical indicators of acceptance for each chain. \cr \cr
  \code{swap_chains}: \code{list} of updated change points, 
    log-likelihoods, and chain ids, as well as a \code{vector} of 
    acceptance indicators for each swap.  \cr \cr
 \code{proposed_step_mods}: \code{list} of models associated with the
   proposed step, with an element for each chain. \cr \cr 
 \code{count_trips}: \code{list} of [1] \code{vector} of within particle 
   trip counts (\code{$trip_counts}), and [2] \code{vector} of 
   within-particle average trip rates (\code{$trip_rates}).
}
\description{
Uses the LDATS classic parallel tempering Markov Chain Monte 
  Carlo (ptMCMC) methods (Earl and Deem 2005) to fit a changepoint
  model, following Christensen \emph{et al.} (2018). \cr \cr
  \code{ldats_classic} is the top-level function for the sampler. \cr \cr
  \code{ldats_classic_control} defines and creates a control \code{list} 
    for use with \code{\link{ldats_classic}}.
  \code{prep_ptMCMC_inputs} packages the static inputs (controls and 
    data structures) used by the ptMCMC algorithm in the context of 
    estimating change points.
  \code{prep_proposal_dist} prep-calculates the proposal distribution 
    for the ptMCMC algorithm in order to decrease computation time.
    The proposal distribution is a joint of three distributions:
    [1] a multinomial distribution selecting among the change points within
    the chain, [2] a binomial distribution selecting the direction of the 
    step of the change point (earlier or later in the time series), and 
    [3] a geometric distribution selecting the magnitude of the step.
  \code{prep_ids} creates the active vector of identities (ids) for each 
    of the chains in the ptMCMC algorithm, which are used to track trips 
    of the particles among chains. \cr \cr
  \code{update_ids} updates the active vector of identities (ids) for
    each of the chains in the ptMCMC algorithm after each iteration. 
    \cr \cr
  \code{prep_cpts} initializes each chain using a draw from the available 
    times (i.e. assuming a uniform prior), the best fit (by likelihood) 
    draw is put in the focal chain with each subsequently worse fit placed 
    into the subsequently hotter chain. \cr \cr
  \code{update_cpts} updates the change points after every iteration in 
    the ptMCMC algorithm. \cr \cr
  \code{prep_saves} creates the data structure used to save the 
    output from each iteration of the ptMCMC algorithm. \cr \cr
  \code{update_saves} adds to the data structure after each iteration.
    \cr \cr
  \code{process_saves} processes (burn-in iterations are dropped and the 
    remaining iterations are thinned) the saved data objects after the
    ptMCMC is complete. \cr \cr
  \code{prep_temp_sequence} creates the series of temperatures used in the 
    ptMCMC algorithm. \cr \cr
  \code{step_chains} steps the chains forward one iteration 
    of the within-chain component of the ptMCMC algorithm. \cr \cr 
  \code{prop_step} makes the proposal for the next step. \cr \cr
  \code{eval_step} evaluates the proposa. \cr \cr
  \code{take_step} updates the configuration. \cr \cr
  \code{proposed_step_mods} proposes the models for all chains in a given
    step of the sampler. \cr \cr
  \code{swap_chains} handles the among-chain swapping based on 
    temperatures and likelihood differentials. \cr \cr
 \code{count_trips} counts the full trips (from one extreme temperature 
   chain to the other and back again; Katzgraber \emph{et al.} 2006) for 
   each of the ptMCMC particles, as identified by their id on 
   initialization.
}
\details{
For each iteration of the ptMCMC algorithm, all of the chains
  have the potential to take a step. The possible step is proposed under
  a proposal distribution (here for change points we use a symmetric
  geometric distribution), the proposed step is then evaluated and either
  accepted or not (following the Metropolis-Hastings rule; Metropolis,
  \emph{et al.} 1953, Hasting 1960, Gupta \emph{et al.} 2018), and then
  accordingly taken or not (the configurations are updated). \cr \cr
  The ptMCMC algorithm couples the chains (which are 
  taking their own walks on the distribution surface) through "swaps", 
  where neighboring chains exchange configurations (Geyer 1991, Falcioni 
  and Deem 1999) following the Metropolis criterion (Metropolis 
  \emph{et al.} 1953). This allows them to share information and search the
  surface in combination (Earl and Deem 2005).
}
\references{
Christensen, E., D. J. Harris, and S. K. M. Ernest. 2018.
  Long-term community change through multiple rapid transitions in a 
  desert rodent community. \emph{Ecology} \strong{99}:1523-1529. 
  \href{https://doi.org/10.1002/ecy.2373}{link}.

  Earl, D. J. and M. W. Deem. 2005. Parallel tempering: theory, 
  applications, and new perspectives. \emph{Physical Chemistry Chemical 
  Physics} \strong{7}: 3910-3916.
  \href{https://doi.org/10.1039/B509983H}{link}.

  Falcioni, M. and M. W. Deem. 1999. A biased Monte Carlo scheme for 
  zeolite structure solution.  \emph{Journal of Chemical Physics}
  \strong{110}: 1754-1766.
  \href{https://aip.scitation.org/doi/10.1063/1.477812}{link}.

  Geyer, C. J. 1991. Markov Chain Monte Carlo maximum likelihood. \emph{In
  Computing Science and Statistics: Proceedings of the 23rd Symposium on 
  the Interface}. pp 156-163. American Statistical Association, New York,
  USA. \href{https://www.stat.umn.edu/geyer/f05/8931/c.pdf}{link}.

  Gupta, S., L. Hainsworth, J. S. Hogg, R. E. C. Lee, and J. R. Faeder. 
  2018. Evaluation of parallel tempering to accelerate Bayesian parameter
  estimation in systems biology. 
  \href{https://arxiv.org/abs/1801.09831}{link}.

  Hastings, W. K. 1970. Monte Carlo sampling methods using Markov Chains
  and their applications. \emph{Biometrika} \strong{57}:97-109.
  \href{https://doi.org/10.2307/2334940}{link}.#' 
  Katzgraber, H. G., S. Trebst, D. A. Huse. And M. Troyer. 2006. 
  Feedback-optimized parallel tempering Monte Carlo. \emph{Journal of 
  Statistical Mechanics: Theory and Experiment} \strong{3}:P03018
  \href{https://bit.ly/2LICGXh}{link}.
 
  Metropolis, N., A. W. Rosenbluth, M. N. Rosenbluth, A. H. Teller, and E.
  Teller. 1953. Equations of state calculations by fast computing machines.
  \emph{Journal of Chemical Physics} \strong{21}: 1087-1092.
  \href{https://bayes.wustl.edu/Manual/EquationOfState.pdf}{link}.
}
